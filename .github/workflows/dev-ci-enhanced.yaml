name: Dev CI Enhanced

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: dev-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-dev:
    name: Enhanced Development Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Tools
        uses: ./.github/actions/setup-tools
        with:
          cache-key: ${{ runner.os }}-helm-dev-${{ github.sha }}

      - name: Cache Minikube
        uses: actions/cache@v4
        with:
          path: ~/.minikube/cache/
          key: ${{ runner.os }}-minikube-cache-${{ github.sha }}

      - name: Setup Minikube
        uses: medyagh/setup-minikube@v0.0.15
        with:
          driver: docker
          kubernetes-version: v1.30.2
          cpus: 4
          memory: 8192mb
          profile: minikube-${{ github.sha }}

      - name: Start Minikube Tunnel
        run: minikube tunnel &

      - name: Configure Minikube
        run: |
          minikube profile minikube-${{ github.sha }}
          minikube addons disable ingress
          minikube addons disable storage-provisioner     

      - name: Bootstrap cluster (Kustomize-based)
        run: |
          cd infra/bootstrap
          set -euo pipefail
          
          echo "::group::Phase 1: Apply CRDs with Kustomize"
          kubectl apply -k crds/ --validate=false
          echo "::endgroup::"
          
          echo "::group::Phase 2: Wait for CRDs Established"
          kubectl get crd -o name | grep -E 'cert-manager.io|traefik.io|acme.cert-manager.io|bitnami.com|argoproj.io' | \
            xargs kubectl wait --for=condition=Established --timeout=180s
          echo "::endgroup::"
          
          echo "::group::Phase 3: Apply Full Bootstrap with Kustomize"
          kubectl apply -k .  # Aplica namespaces, rbac, secrets, middlewares, argocd apps
          echo "::endgroup::"
          
          echo "::group::Phase 4: Wait for SealedSecrets Unsealing"
          # Tu código original para wait sealedsecrets...
          for ss in $(kubectl get sealedsecrets -A -o jsonpath='{range .items[*]}{.metadata.namespace}{" "}{.metadata.name}{"\n"}{end}' 2>/dev/null || echo ""); do
            if [ -n "$ss" ]; then
              ns=$(echo $ss | cut -d' ' -f1)
              name=$(echo $ss | cut -d' ' -f2)
              echo "  - Unsealing $name in namespace $ns..."
              kubectl wait sealedsecret/$name -n $ns --for=condition=Sealed=true --timeout=120s || echo "    ⚠️ Unsealing of $name failed"
            fi
          done
          echo "::endgroup::"
          
          echo "::group::Phase 5: Final Verification"
          # Tu código de verification...
          echo "::endgroup::"

      - name: Validate Manifests (minikube)
        uses: ./.github/actions/validate-manifests
        with:
          environment: minikube    

      - name: Pre-pull container images
        run: |
          source versions.env
          minikube ssh "docker pull traefik:v3.4.3; docker pull quay.io/jetstack/cert-manager-controller:v1.18.2"

      - name: Deploy applications to Minikube
        run: |
          cd infra/apps
          helmfile --environment minikube apply --suppress-secrets 
          kubectl wait deployment -n cert-manager --all --for=condition=Available || true

      - name: Debug Traefik if deployment fails
        if: failure()
        run: |
          kubectl get pods -n traefik
          kubectl describe pod -n traefik -l app.kubernetes.io/name=traefik
          kubectl logs -n traefik -l app.kubernetes.io/name=traefik || echo "No current logs"
          kubectl logs -n traefik -l app.kubernetes.io/name=traefik --previous || echo "No previous logs"

      - name: Wait for all pods to be ready
        run: |
          kubectl wait pod --all -A --for=condition=Ready 

      - name: Check for crashloops
        run: |
          CRASHED_PODS=$(kubectl get pods --all-namespaces --field-selector=status.phase!=Running -o jsonpath='{.items[*].metadata.name}')
          if [ -n "$CRASHED_PODS" ]; then
            echo "::error::Found pods not in Running state:"
            kubectl get pods --all-namespaces --field-selector=status.phase!=Running
            exit 1
          fi
          echo "✅ All pods are running"

      - name: Enhanced smoke tests
        run: |
          chmod +x tests/smoke.sh
          ./tests/smoke.sh

      - name: Cleanup Minikube
        if: always()
        run: |
          minikube delete -p minikube-${{ github.sha }} 