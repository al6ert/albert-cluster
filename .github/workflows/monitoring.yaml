name: Monitoring & Observability

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]

jobs:
  # Monitor deployment health
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Setup kubeconfig
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.NETCUP_KUBECONFIG_RO }}" > ~/.kube/config
          chmod 600 ~/.kube/config
      
      # Check pod status
      - name: Check pod status
        run: |
          kubectl get pods -A -o wide
          kubectl get nodes -o wide
      
      # Check service endpoints
      - name: Check service endpoints
        run: |
          kubectl get endpoints -A
          kubectl get services -A
      
      # Check ingress status
      - name: Check ingress status
        run: |
          kubectl get ingress -A
          kubectl get ingressroute -A
      
      # Resource usage
      - name: Check resource usage
        run: |
          kubectl top nodes
          kubectl top pods -A

  # Performance monitoring
  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - uses: actions/checkout@v4
      
      # Setup kubeconfig
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.NETCUP_KUBECONFIG_RO }}" > ~/.kube/config
          chmod 600 ~/.kube/config
      
      # Check cluster metrics
      - name: Check cluster metrics
        run: |
          # CPU and memory usage
          kubectl describe nodes | grep -A 5 "Allocated resources"
          
          # Pod resource requests/limits
          kubectl get pods -A -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,CPU_REQUEST:.spec.containers[*].resources.requests.cpu,CPU_LIMIT:.spec.containers[*].resources.limits.cpu,MEMORY_REQUEST:.spec.containers[*].resources.requests.memory,MEMORY_LIMIT:.spec.containers[*].resources.limits.memory"
      
      # Check for resource pressure
      - name: Check for resource pressure
        run: |
          # Check for pending pods
          kubectl get pods -A --field-selector=status.phase=Pending
          
          # Check for failed pods
          kubectl get pods -A --field-selector=status.phase=Failed
          
          # Check events
          kubectl get events --sort-by='.lastTimestamp' | tail -20

  # Security monitoring
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - uses: actions/checkout@v4
      
      # Setup kubeconfig
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.NETCUP_KUBECONFIG_RO }}" > ~/.kube/config
          chmod 600 ~/.kube/config
      
      # Check for security issues
      - name: Check for security issues
        run: |
          # Check for pods running as root
          kubectl get pods -A -o jsonpath='{range .items[*]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.securityContext.runAsUser}{"\n"}{end}' | grep -v "1000\|1001"
          
          # Check for privileged containers
          kubectl get pods -A -o jsonpath='{range .items[*]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.containers[*].securityContext.privileged}{"\n"}{end}' | grep "true"
          
          # Check for host path mounts
          kubectl get pods -A -o jsonpath='{range .items[*]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.volumes[*].hostPath.path}{"\n"}{end}' | grep -v "^$"
      
      # Check RBAC
      - name: Check RBAC
        run: |
          kubectl get clusterroles
          kubectl get clusterrolebindings
          kubectl get roles -A
          kubectl get rolebindings -A

  # Generate monitoring report
  report:
    name: Generate Report
    runs-on: ubuntu-latest
    needs: [health-check, performance, security-monitoring]
    if: always()
    steps:
      - name: Generate monitoring report
        run: |
          echo "# Monitoring Report - $(date)" > monitoring-report.md
          echo "" >> monitoring-report.md
          echo "## Health Status" >> monitoring-report.md
          echo "- Health Check: ${{ needs.health-check.result }}" >> monitoring-report.md
          echo "- Performance: ${{ needs.performance.result }}" >> monitoring-report.md
          echo "- Security: ${{ needs.security-monitoring.result }}" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "## Summary" >> monitoring-report.md
          if [[ "${{ needs.health-check.result }}" == "success" && "${{ needs.performance.result }}" == "success" && "${{ needs.security-monitoring.result }}" == "success" ]]; then
            echo "✅ All systems operational" >> monitoring-report.md
          else
            echo "⚠️ Issues detected - manual intervention required" >> monitoring-report.md
          fi
      
      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-report
          path: monitoring-report.md 