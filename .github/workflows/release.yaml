name: Automated Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Generate changelog
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # First release
            CHANGELOG=$(git log --oneline --no-merges)
          else
            # Get commits since last tag
            CHANGELOG=$(git log --oneline --no-merges ${PREVIOUS_TAG}..HEAD)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # Create release
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            kubectl apply -f infra/bootstrap/argocd.yaml
            kubectl apply -f infra/bootstrap/argocd-root.yaml
            ```
            
            ## Upgrade
            
            ```bash
            helmfile -f infra/apps/helmfile.yaml apply
            ```
          draft: false
          prerelease: false
      
      # Update version files
      - name: Update version files
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Update Chart.yaml versions
          find infra/charts -name "Chart.yaml" -exec sed -i "s/version: .*/version: ${VERSION#v}/" {} \;
          
          # Update package.json if exists
          if [ -f "package.json" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION#v}\"/" package.json
          fi
      
      # Commit version updates
      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update version to ${{ env.VERSION }}" || echo "No changes to commit"
          git push 