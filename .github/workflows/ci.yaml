name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write      # necesario para crear ramas y PRs
  pull-requests: write # necesario para abrir / actualizar el PR

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  HELM_VERSION: v3.18.3
  HELMFILE_VERSION: v0.162.0
  YQ_VERSION: v4.40.5

########################
# JOB 1: VALIDACIÓN DEV #
########################
jobs:
  build-test-dev:
    if: github.ref == 'refs/heads/main'
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # -------- Herramientas --------------------------------------------------
      - name: Cache Helm plugins & charts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/helm
            ~/.local/share/helm
          key: ${{ runner.os }}-helm-${{ env.HELM_VERSION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with: { version: 'latest' }

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with: { version: ${{ env.HELM_VERSION }} }

      - name: Install Helmfile & yq
        run: |
          sudo apt-get update -y

          # Helmfile
          curl -sSL "https://github.com/helmfile/helmfile/releases/download/${HELMFILE_VERSION}/helmfile_${HELMFILE_VERSION}_linux_amd64.tar.gz" \
            | tar -xz && sudo mv helmfile /usr/local/bin/

          # yq
          curl -sSL "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" \
            -o /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

      # -------- Render + validaciones -----------------------------------------
      - name: Render manifests (netcup)
        run: |
          echo "::group::Render"
          cd infra/apps
          mkdir -p ../rendered/netcup
          helmfile --environment netcup template > ../rendered/netcup/all.yaml
          echo "::endgroup::"

      - name: Validate YAML syntax
        run: |
          python3 - <<'PY'
          import yaml, sys
          yaml.safe_load_all(open('infra/rendered/netcup/all.yaml'))
          print("✅ YAML válido")
          PY

      - name: Compare middlewares minikube vs netcup
        run: |
          set -euo pipefail
          yq '.middlewares' infra/envs/minikube/traefik-values.yaml > /tmp/minikube_mw
          yq '.middlewares' infra/envs/netcup/traefik-values.yaml > /tmp/netcup_mw
          diff -u /tmp/minikube_mw /tmp/netcup_mw
          echo "✅ Middlewares coinciden"

      - name: Compare namespaces minikube vs netcup
        run: |
          set -euo pipefail
          cd infra/apps
          helmfile --environment minikube template > /tmp/minikube-all.yaml
          helmfile --environment netcup template > /tmp/netcup-all.yaml
          minikube_ns=$(yq e '.metadata.namespace' /tmp/minikube-all.yaml | sort -u | grep -v null)
          netcup_ns=$(yq e '.metadata.namespace' /tmp/netcup-all.yaml | sort -u | grep -v null)

          if [ "$minikube_ns" != "$netcup_ns" ]; then
            echo "::error::Namespaces no coinciden"
            exit 1
          fi
          echo "✅ Namespaces coinciden"

      # -------- Tests de Humo en Minikube ------------------------------------
      - name: Setup Minikube
        uses: medyagh/setup-minikube@v0.0.15
        with:
          driver: docker
          kubernetes-version: v1.29.2
          profile: minikube-${{ github.sha }}

      - name: Deploy and test in Minikube
        run: |
          cd infra/apps
          helmfile --environment minikube apply --suppress-secrets
          kubectl wait pod --all -A --for=condition=Ready --timeout=300s
          ./tests/smoke.sh

      - name: Cleanup Minikube
        if: always()
        run: |
          minikube delete -p minikube-${{ github.sha }}

########################
# JOB 2: PROMOCIÓN PROD #
########################
  promote-prod:
    needs: build-test-dev
    if: github.ref == 'refs/heads/main'
    environment: prod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # -------- Herramientas --------------------------------------------------
      - name: Cache Helm plugins & charts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/helm
            ~/.local/share/helm
          key: ${{ runner.os }}-helm-${{ env.HELM_VERSION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with: { version: 'latest' }

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with: { version: ${{ env.HELM_VERSION }} }

      - name: Install Helmfile & yq
        run: |
          sudo apt-get update -y

          # Helmfile
          curl -sSL "https://github.com/helmfile/helmfile/releases/download/${HELMFILE_VERSION}/helmfile_${HELMFILE_VERSION}_linux_amd64.tar.gz" \
            | tar -xz && sudo mv helmfile /usr/local/bin/

          # yq
          curl -sSL "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" \
            -o /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

      # -------- Render + validaciones -----------------------------------------
      - name: Render manifests (netcup)
        run: |
          echo "::group::Render"
          cd infra/apps
          mkdir -p ../rendered/netcup
          helmfile --environment netcup template > ../rendered/netcup/all.yaml
          echo "::endgroup::"

      - name: Validate YAML syntax
        run: |
          python3 - <<'PY'
          import yaml, sys
          yaml.safe_load_all(open('infra/rendered/netcup/all.yaml'))
          print("✅ YAML válido")
          PY

      - name: Compare middlewares minikube vs netcup
        run: |
          set -euo pipefail
          yq '.middlewares' infra/envs/minikube/traefik-values.yaml > /tmp/minikube_mw
          yq '.middlewares' infra/envs/netcup/traefik-values.yaml > /tmp/netcup_mw
          diff -u /tmp/minikube_mw /tmp/netcup_mw
          echo "✅ Middlewares coinciden"

      - name: Compare namespaces minikube vs netcup
        run: |
          set -euo pipefail
          cd infra/apps
          helmfile --environment minikube template > /tmp/minikube-all.yaml
          helmfile --environment netcup template > /tmp/netcup-all.yaml
          minikube_ns=$(yq e '.metadata.namespace' /tmp/minikube-all.yaml | sort -u | grep -v null)
          netcup_ns=$(yq e '.metadata.namespace' /tmp/netcup-all.yaml | sort -u | grep -v null)

          if [ "$minikube_ns" != "$netcup_ns" ]; then
            echo "::error::Namespaces no coinciden"
            exit 1
          fi
          echo "✅ Namespaces coinciden"

      # -------- ArgoCD Diff y Sync -------------------------------------------
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: ArgoCD diff
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd app diff cluster-root --local ./infra/apps --grpc-web || {
            echo "::error::ArgoCD diff detected unexpected changes"
            exit 1
          }

      - name: ArgoCD sync
        run: |
          argocd app sync cluster-root --prune --self-heal

      - name: Wait for sync completion
        run: |
          argocd app wait cluster-root --health --timeout 300

########################
# JOB 3: VALIDACIÓN PR #
########################
  validate_only:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Misma instalación de herramientas (omitido por brevedad)
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with: { version: 'latest' }

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with: { version: ${{ env.HELM_VERSION }} }

      - name: Install Helmfile & yq
        run: |
          sudo apt-get update -y

          # Helmfile
          curl -sSL "https://github.com/helmfile/helmfile/releases/download/${HELMFILE_VERSION}/helmfile_${HELMFILE_VERSION}_linux_amd64.tar.gz" \
            | tar -xz && sudo mv helmfile /usr/local/bin/

          # yq
          curl -sSL "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" \
            -o /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

      # Render + validaciones idénticas al job anterior
      - name: Render manifests (netcup)
        run: |
          cd infra/apps
          mkdir -p ../rendered/netcup
          helmfile --environment netcup template > ../rendered/netcup/all.yaml

      - name: Validate YAML syntax
        run: |
          python3 - <<'PY'
          import yaml, sys
          yaml.safe_load_all(open('infra/rendered/netcup/all.yaml'))
          print("✅ YAML válido")
          PY

      - name: Compare middlewares minikube vs netcup
        run: |
          set -euo pipefail
          yq '.middlewares' infra/envs/minikube/traefik-values.yaml > /tmp/minikube_mw
          yq '.middlewares' infra/envs/netcup/traefik-values.yaml > /tmp/netcup_mw
          diff -u /tmp/minikube_mw /tmp/netcup_mw
          echo "✅ Middlewares coinciden"

      - name: Compare namespaces minikube vs netcup
        run: |
          set -euo pipefail
          cd infra/apps
          helmfile --environment minikube template > /tmp/minikube-all.yaml
          helmfile --environment netcup template > /tmp/netcup-all.yaml
          minikube_ns=$(yq e '.metadata.namespace' /tmp/minikube-all.yaml | sort -u | grep -v null)
          netcup_ns=$(yq e '.metadata.namespace' /tmp/netcup-all.yaml | sort -u | grep -v null)

          if [ "$minikube_ns" != "$netcup_ns" ]; then
            echo "::error::Namespaces no coinciden"
            exit 1
          fi
          echo "✅ Namespaces coinciden"
