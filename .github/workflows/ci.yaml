name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  security-events: write
  packages: write

jobs:
  # 1) Validaci√≥n de sintaxis y linting
  validate:
    name: Validate & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Validaci√≥n de sintaxis YAML
      # - name: Validate YAML syntax
      #   run: |
      #     find . -name "*.yaml" -o -name "*.yml" | xargs -I {} sh -c 'echo "Validating {}"; yamllint {} || exit 1'
      
      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
      
      # Lint de todos los charts
      - name: Helm lint custom charts
        run: |
          if [ -d "infra/charts" ]; then
            find infra/charts -name "Chart.yaml" -exec dirname {} \; | xargs -I {} helm lint {}
          fi
      
      # Validaci√≥n de Kustomize
      - name: Validate Kustomize
        run: |
          if [ -f "infra/bootstrap/kustomization.yaml" ]; then
            # Generate Kustomize output and validate YAML syntax
            kubectl kustomize infra/bootstrap/ > /tmp/kustomize-output.yaml
            if [ -s /tmp/kustomize-output.yaml ]; then
              # Validate YAML syntax using kubectl explain (doesn't require API server)
              kubectl explain --api-version=v1 --kind=Pod > /dev/null 2>&1 || echo "kubectl explain not available, skipping API validation"
              echo "‚úÖ Kustomize output generated successfully"
              echo "üìÑ Generated $(wc -l < /tmp/kustomize-output.yaml) lines of YAML"
            else
              echo "‚ö†Ô∏è Kustomize generated empty output - this might be expected"
            fi
          else
            echo "‚ÑπÔ∏è No kustomization.yaml found in infra/bootstrap/"
          fi

  # 2) Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      # Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # Upload security results
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'


  # 3) Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [validate, security]
    steps:
      - uses: actions/checkout@v4
      
      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
      
      # Install helm-unittest plugin
      - name: Install helm-unittest plugin
        run: helm plugin install https://github.com/quintush/helm-unittest
      
      # Run unit tests
      - name: Run unit tests
        run: |
          if [ -d "infra/charts" ]; then
            find infra/charts -name "Chart.yaml" -exec dirname {} \; | xargs -I {} helm unittest {}
          fi
      
      # Integration tests with kind
      - name: Set up kind
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:v1.28.0
      
      - name: Bootstrap Argo CD
        run: |
          # 1. Aplica primero los CRDs
          kubectl apply -f infra/bootstrap/crds/
          # 2. Espera a que los CRDs est√©n disponibles
          echo "Esperando 10 segundos a que los CRDs est√©n listos..."
          sleep 10
          # 3. Aplica el resto de los recursos usando kustomize
          kubectl apply -k infra/bootstrap/
          # espera a que los pods levanten
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

      - name: Run integration tests
        run: |
          # Apply bootstrap manifests
          kubectl apply -f infra/bootstrap/argocd.yaml
          kubectl apply -f infra/bootstrap/argocd-root.yaml
          
          # Wait for Argo CD to sync
          sleep 30
          
          # Verify deployments
          kubectl get applications -n argocd
          kubectl get pods -A

  # 4) Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
      
      # Install Helmfile
      - name: Install Helmfile
        run: |
          curl -L https://github.com/helmfile/helmfile/releases/latest/download/helmfile_linux_amd64 > /usr/local/bin/helmfile
          chmod +x /usr/local/bin/helmfile
      
      # Setup kubeconfig for production
      - name: Setup kubeconfig for production
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.NETCUP_KUBECONFIG_RO }}" > ~/.kube/config
          chmod 600 ~/.kube/config
      
      # Verify connectivity
      - name: Verify kubectl connectivity
        run: kubectl get nodes
      
      # Validate CRDs
      - name: Validate CRDs
        run: |
          kubectl apply --dry-run=client -f infra/bootstrap/crds/
          echo "‚úÖ CRDs validation passed"
      
      # Add Helm repos
      - name: Add Helm repos
        run: |
          helm repo add traefik https://traefik.github.io/charts
          helm repo update
      
      # Validate templates
      - name: Validate Helmfile templates
        run: |
          cd infra/apps
          helmfile template --environment netcup | kubectl apply --dry-run=client -f -
          echo "‚úÖ Helmfile templates validation passed"
      
      # Deploy to production
      - name: Deploy to production
        run: |
          cd infra/apps
          helmfile apply --environment netcup
      
      # Verify deployment
      - name: Verify deployment
        run: |
          kubectl get pods -A
          kubectl get services -A
          kubectl get ingress -A

  # 5) Post-deployment verification
  verify:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      # Setup kubeconfig
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.NETCUP_KUBECONFIG_RO }}" > ~/.kube/config
          chmod 600 ~/.kube/config
      
      # Health checks
      - name: Run health checks
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=traefik -n traefik --timeout=300s
          
          # Check service endpoints
          kubectl get endpoints -A
          
          # Test connectivity (if external IP available)
          # curl -I http://your-domain.com/health || echo "External health check skipped"
      
      # Performance tests
      - name: Run performance tests
        run: |
          # Basic load testing with hey (if available)
          # hey -n 100 -c 10 http://your-domain.com/ || echo "Performance tests skipped"

  # 6) Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [verify]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          # Add Slack/Discord/Email notifications here
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          # Add failure notifications here

   
