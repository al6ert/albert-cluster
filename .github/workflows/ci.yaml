name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Tools
        uses: ./.github/actions/setup-tools

      - name: Validate Manifests (minikube)
        uses: ./.github/actions/validate-manifests
        with:
          environment: minikube

      - name: Validate Manifests (netcup)  
        uses: ./.github/actions/validate-manifests
        with:
          environment: netcup

      - name: Compare namespace consistency
        run: |
          cd infra/apps
          helmfile --environment minikube template > /tmp/minikube-all.yaml
          helmfile --environment netcup template > /tmp/netcup-all.yaml
          minikube_ns=$(yq e '.metadata.namespace' /tmp/minikube-all.yaml | sort -u | grep -v null)
          netcup_ns=$(yq e '.metadata.namespace' /tmp/netcup-all.yaml | sort -u | grep -v null)

          if [ "$minikube_ns" != "$netcup_ns" ]; then
            echo "::error::Namespaces don't match between environments"
            exit 1
          fi
          echo "âœ… Namespaces are consistent across environments"

  build-test-dev:
    name: Build and Test (Development)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Tools
        uses: ./.github/actions/setup-tools

      - name: Validate Manifests (netcup)
        uses: ./.github/actions/validate-manifests
        with:
          environment: netcup

      - name: Setup Minikube
        uses: medyagh/setup-minikube@v0.0.15
        with:
          driver: docker
          kubernetes-version: v1.29.2
          profile: minikube-${{ github.sha }}

      - name: Bootstrap cluster
        run: |
          cd infra/bootstrap
          set -euo pipefail
          
          echo "::group::Phase 1: Namespaces + CRDs + RBAC"
          kubectl apply -k namespaces/
          kubectl apply -k crds/ --validate=false
          kubectl apply -f rbac/gh-actions.yaml
          echo "::endgroup::"
          
          echo "::group::Phase 2: Wait for CRDs"
          kubectl get crd -o name | grep -E 'cert-manager.io|traefik.io|acme.cert-manager.io|bitnami.com|argoproj.io' | \
            xargs kubectl wait --for=condition=Established --timeout=180s
          echo "::endgroup::"
          
          echo "::group::Phase 3: Secrets + Middlewares"
          kubectl apply -k secrets/
          kubectl apply -k middlewares/
          echo "::endgroup::"

      - name: Deploy and test applications
        run: |
          cd infra/apps
          helmfile --environment minikube apply --suppress-secrets --timeout 900s
          kubectl wait pod --all -A --for=condition=Ready --timeout=300s

      - name: Run smoke tests
        run: |
          chmod +x tests/smoke.sh
          ./tests/smoke.sh

      - name: Cleanup
        if: always()
        run: |
          minikube delete -p minikube-${{ github.sha }}

  promote-prod:
    name: Promote to Production
    needs: build-test-dev
    if: github.ref == 'refs/heads/main'
    environment: prod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Tools
        uses: ./.github/actions/setup-tools

      - name: Validate Manifests (netcup)
        uses: ./.github/actions/validate-manifests
        with:
          environment: netcup

      - name: Install ArgoCD CLI
        run: |
          source versions.env
          curl -sSL -o argocd-linux-amd64 "https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}/argocd-linux-amd64"
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: ArgoCD diff and sync
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          
          echo "::group::ArgoCD diff"
          argocd app diff cluster-root --grpc-web || {
            echo "::warning::ArgoCD diff detected changes, proceeding with sync"
          }
          echo "::endgroup::"

          echo "::group::ArgoCD sync"
          argocd app sync cluster-root --prune --self-heal
          argocd app wait cluster-root --health --timeout 300
          echo "::endgroup::"
